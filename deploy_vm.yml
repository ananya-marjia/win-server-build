---
- name: Provision Windows VM from Azure Compute Gallery
  hosts: localhost
  connection: local
  gather_facts: no
  collections:
    - azure.azcollection
  vars_files:
    - vault.yml    

  vars:
    resource_group: "RG_INFRA"
    location: "canadacentral"
    vnet_name: "VNET_GENERIC"
#    vm_name: winvm-from-gallery
    vm_size: Standard_B1s
    admin_username: azureuser
    admin_password: "{{ admin_password }}"
    subnet_name: SUBNET_APP
#    nic_name: winvm-nic
#    public_ip_name: winvm-pip
    image_gallery: Ana_Gallery2
    image_definition: Win2022G2
    image_version: 1.0.0   

  tasks:
    - block:
        - name: Generate Public IP and NIC names
          set_fact:
            pip_name: "{{ vm_name }}_pip"
            nic_name: "{{ vm_name }}_nic"       
    
        - name: Create a public IP address
          azure.azcollection.azure_rm_publicipaddress:
            resource_group: "{{ resource_group }}"
            name: "{{ pip_name }}"
            allocation_method: Static
            location: "{{ location }}" 

        - name: Create NIC referencing cross-RG VNet/subnet & NSG
          azure_rm_networkinterface:
            resource_group: "{{ resource_group }}"
            name: "{{ nic_name }}"
            location: "{{ location }}"
            os_type: "Windows"
            subnet: "{{ subnet_name }}"
            virtual_network:
              name:  "{{ vnet_name }}"
              resource_group: "RG_NETWORK"        
            subscription_id: "3d489bb7-7b50-4375-93ca-5e42db0494e1"
            security_group:
              name: "NSG_APP"
              resource_group: "RG_NETWORK"         
            ip_configurations:
              - name: ipconfig1
                public_ip_address_name: "{{ pip_name }}"  
                primary: true

      rescue:
        - fail:
            msg: "Failed to prepare networking resources (PIP or NIC)."                

    - block:
        - name: Provision Windows VM
          azure_rm_virtualmachine:
            name: "{{ vm_name }}"
            resource_group: "{{ resource_group }}"
            location: "{{ location }}"
            vm_size: "{{ vm_size }}"
            admin_username: "{{ admin_username }}"
            admin_password: "{{ admin_password }}"
            # virtual_network_name: "{{ vnet_name }}"
            # subnet: "{{ subnet_name }}"
            network_interfaces: "{{ nic_name }}"
            os_type: Windows
            image:        
              id: "/subscriptions/3d489bb7-7b50-4375-93ca-5e42db0494e1/resourceGroups/winImageBuildRG/providers/Microsoft.Compute/galleries/Ana_Gallery2/images/Win2022G2/versions/1.0.0"
            custom_data: "{{ lookup('file', 'enable_winrm.ps1') | b64encode }}"
            managed_disk_type: Standard_LRS
            security_profile:
              security_type: TrustedLaunch
              uefi_settings:
                secure_boot_enabled: true
                v_tpm_enabled: true
            state: present

        - name: VM deployment success
          debug:
            msg: "✅ VM {{ vm_name }} deployed with NIC {{ nic_name }} and PIP {{ pip_name }}"

        - name: Get public IP details
          azure.azcollection.azure_rm_publicipaddress_info:
            resource_group: "{{ resource_group }}"
            name: "{{ pip_name }}"
          register: public_ip_info

        # - name: Set Windows VM target IP
        #   set_fact:
        #     winvm_ip: "{{ public_ip_info.azure_publicipaddresses[0].ip_address }}"

        - name: Wait for WinRM to become available
          wait_for:
            host: "{{ public_ip_info }}"
            port: 5986
            delay: 10
            timeout: 300
            state: started

        - name: Add new Windows VM to inventory dynamically
          add_host:
            name: winvm
            ansible_host: "{{ winvm_ip }}"
            ansible_user: azureuser
            ansible_password: "{{ admin_password }}"
            ansible_connection: winrm
            ansible_port: 5986
            ansible_winrm_transport: basic
            ansible_winrm_server_cert_validation: ignore
            

      rescue:
        - name: Clean up NIC and PIP on failure
          azure.azcollection.azure_rm_networkinterface:
            resource_group: "{{ resource_group }}"
            name: "{{ nic_name }}"
            state: absent

        - name: Remove Public IP on failure
          azure.azcollection.azure_rm_publicipaddress:
            resource_group: "{{ resource_group }}"
            name: "{{ pip_name }}"
            state: absent

        - fail:
            msg: "❌ VM deployment failed — cleaned up related resources."     

- name: Configure WinRM ports on new Windows VM
  hosts: winvm
  gather_facts: no
  tasks:
    - name: Enable WinRM over HTTP and HTTPS (5985/5986)
      win_shell: |
        $ErrorActionPreference = 'Stop'

        # Enable basic WinRM over HTTP
        if (-not (winrm enumerate winrm/config/listener | Select-String -SimpleMatch "Transport = HTTP")) {
          winrm quickconfig -quiet
        }

        # Check for existing HTTPS listener
        $hasHTTPS = winrm enumerate winrm/config/listener | Select-String -SimpleMatch "Transport = HTTPS"

        if (-not $hasHTTPS) {
          $cert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.Subject -like "*CN=$env:COMPUTERNAME" } | Select-Object -First 1

          if (-not $cert) {
            $cert = New-SelfSignedCertificate -DnsName $env:COMPUTERNAME -CertStoreLocation "cert:\LocalMachine\My" -KeyUsage DigitalSignature, KeyEncipherment -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.1") -FriendlyName "WinRM Self-Signed Cert"
          }

          $thumbprint = $cert.Thumbprint
          $listener = "@{Hostname=\"\"; CertificateThumbprint=\"$thumbprint\"; Port=\"5986\"}"
          cmd /c "winrm create winrm/config/Listener?Address=*+Transport=HTTPS $listener"
        }

        # Open firewall ports
        netsh advfirewall firewall add rule name="WinRM HTTP" dir=in action=allow protocol=TCP localport=5985
        netsh advfirewall firewall add rule name="WinRM HTTPS" dir=in action=allow protocol=TCP localport=5986

    - name: Confirm WinRM listeners are configured
      win_command: winrm enumerate winrm/config/listener
      register: winrm_listeners

    - name: Show WinRM Listener Config
      debug:
        var: winrm_listeners.stdout_lines
